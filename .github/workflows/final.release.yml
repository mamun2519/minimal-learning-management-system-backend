name: Create Release

on:
  workflow_run:
    workflows: ["Build, Test & Deploy"]
    types:
      - completed

permissions:
  contents: write

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ‚≠ê ‡¶ß‡¶æ‡¶™ ‡ßß: Artifact ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶Ø‡¶º, ZIP ‡¶°‡ßá‡¶ü‡¶æ)
      - name: Download Artifact Zip Data
        uses: actions/github-script@v6
        id: download
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }},
            });

            const matchArtifact = artifacts.artifacts.find(artifact => artifact.name === 'release-image-tags');
            if (!matchArtifact) {
              core.setFailed('Could not find artifact release-image-tags');
              return;
            }

            // Artifact ‡¶ü‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });

            const fs = require('fs');
            // ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø zip ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
            fs.writeFileSync('release-image-tags.zip', Buffer.from(download.data));

      # ‚≠ê ‡¶ß‡¶æ‡¶™ ‡ß®: ZIP ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶®‡¶ú‡¶ø‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶®‡ßÅ‡¶®
      - name: Unzip and Load Image Tags Data
        id: load_tags
        run: |
          # zip ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
          unzip release-image-tags.zip -d release-data

          # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶°‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
          TAGS_DATA=$(cat release-data/image_tags.txt)

          echo "Tags Data: $TAGS_DATA" # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç

          # ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ (Versions ‡¶è‡¶¨‡¶Ç Tags ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ)
          ALL_TAGS=$(echo "$TAGS_DATA" | grep "Tags:" | sed 's/Tags: //')
          VERSION_TAG=$(echo "$TAGS_DATA" | grep "Version:" | sed 's/Version: //')

          # ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
          echo "ALL_TAGS=$ALL_TAGS" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$VERSION_TAG" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          # ‡¶∏‡¶†‡¶ø‡¶ï ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
          tag_name: v${{ env.RELEASE_VERSION }}
          name: Release v${{ env.RELEASE_VERSION }}

          # ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶¨‡¶°‡¶ø‡¶§‡ßá ‡ß©‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú‡ßá‡¶∞ ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
          body: |
            üöÄ **New Release Published**

            ### Docker Images
            The following tags were pushed:
            - **All Tags:** `${{ env.ALL_TAGS }}`
            - **Primary Tag:** `${{ env.IMAGE_NAME }}:v${{ env.RELEASE_VERSION }}`
            - **Latest Tag:** `${{ env.IMAGE_NAME }}:latest` (Assuming this is included in ALL_TAGS)

            ---

            - **Version:** `v${{ env.RELEASE_VERSION }}`
            - **Deployed:** ${{ github.event.workflow_run.updated_at }}

            View workflow run: ${{ github.event.workflow_run.html_url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
