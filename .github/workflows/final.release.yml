name: Create Release

on:
  workflow_run:
    workflows: [" Build, Test & Deploy"]
    types:
      - completed

permissions:
  contents: write

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ‚≠ê ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ: Artifact ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
      - name: Download Artifact
        uses: actions/github-script@v6
        id: download
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }},
            });

            const matchArtifact = artifacts.artifacts.find(artifact => artifact.name === 'release-image-tags');
            if (!matchArtifact) {
              core.setFailed('Could not find artifact release-image-tags');
              return;
            }

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });

            const fs = require('fs');
            const path = require('path');
            constAdmZip = require('adm-zip');

            const zip = new AdmZip(Buffer.from(download.data));
            zip.extractAllTo('release-data', true);

            const tagsData = fs.readFileSync(path.join('release-data', 'image_tags.txt'), 'utf8');
            core.setOutput('image_tags_data', tagsData);

      # ‚≠ê ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ: ‡¶á‡¶Æ‡ßá‡¶ú ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
      - name: Load Image Tags Data
        id: load_tags
        run: |
          # Artifact ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ
          TAGS_DATA="${{ steps.download.outputs.image_tags_data }}"

          # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶≤‡¶æ‡¶á‡¶® ‡¶•‡ßá‡¶ï‡ßá Tags ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
          ALL_TAGS=$(echo "$TAGS_DATA" | grep "Tags:" | sed 's/Tags: //')

          # ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
          VERSION_TAG=$(echo "$TAGS_DATA" | grep "Version:" | sed 's/Version: //')

          # ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
          echo "ALL_TAGS=$ALL_TAGS" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$VERSION_TAG" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá v${{ env.RELEASE_VERSION }} ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
          tag_name: v${{ env.RELEASE_VERSION }}
          name: Release v${{ env.RELEASE_VERSION }}

          # üöÄ ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶¨‡¶°‡¶ø‡¶§‡ßá ‡ß©‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú‡ßá‡¶∞ ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
          body: |
            üöÄ **New Release Published**

            ### Docker Images
            The following tags were pushed:
            - **All Tags:** `${{ env.ALL_TAGS }}`
            - **Primary Tag:** `v${{ env.RELEASE_VERSION }}`
            - **Image Name:** `${{ env.IMAGE_NAME }}` (from workflow_run's env)

            ---

            - **Version:** `v${{ env.RELEASE_VERSION }}`
            - **Deployed:** ${{ github.event.workflow_run.updated_at }}

            View workflow run: ${{ github.event.workflow_run.html_url }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
