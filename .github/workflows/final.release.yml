# name: Create Release

# on:
#   workflow_run:
#     workflows: ["Build, Test & Deploy"]
#     types:
#       - completed

# permissions:
#   contents: write

# jobs:
#   release:
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       # ‚≠ê ‡¶ß‡¶æ‡¶™ ‡ßß: Artifact ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶Ø‡¶º, ZIP ‡¶°‡ßá‡¶ü‡¶æ)
#       - name: Download Artifact Zip Data
#         uses: actions/github-script@v6
#         id: download
#         with:
#           script: |
#             const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               run_id: ${{ github.event.workflow_run.id }},
#             });

#             const matchArtifact = artifacts.artifacts.find(artifact => artifact.name === 'release-image-tags');
#             if (!matchArtifact) {
#               core.setFailed('Could not find artifact release-image-tags');
#               return;
#             }

#             // Artifact ‡¶ü‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
#             const download = await github.rest.actions.downloadArtifact({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               artifact_id: matchArtifact.id,
#               archive_format: 'zip',
#             });

#             const fs = require('fs');
#             // ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø zip ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
#             fs.writeFileSync('release-image-tags.zip', Buffer.from(download.data));

#       # ‚≠ê ‡¶ß‡¶æ‡¶™ ‡ß®: ZIP ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶®‡¶ú‡¶ø‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶®‡ßÅ‡¶®
#       - name: Unzip and Load Image Tags Data
#         id: load_tags
#         run: |
#           # zip ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
#           unzip release-image-tags.zip -d release-data

#           # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶°‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
#           TAGS_DATA=$(cat release-data/image_tags.txt)

#           echo "Tags Data: $TAGS_DATA" # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç

#           # ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ (Versions ‡¶è‡¶¨‡¶Ç Tags ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ)
#           ALL_TAGS=$(echo "$TAGS_DATA" | grep "Tags:" | sed 's/Tags: //')
#           VERSION_TAG=$(echo "$TAGS_DATA" | grep "Version:" | sed 's/Version: //')

#           # ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
#           echo "ALL_TAGS=$ALL_TAGS" >> $GITHUB_ENV
#           echo "RELEASE_VERSION=$VERSION_TAG" >> $GITHUB_ENV

#       - name: Create Release
#         uses: softprops/action-gh-release@v1
#         with:
#           # ‡¶∏‡¶†‡¶ø‡¶ï ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
#           tag_name: v${{ env.RELEASE_VERSION }}
#           name: Release v${{ env.RELEASE_VERSION }}

#           # ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶¨‡¶°‡¶ø‡¶§‡ßá ‡ß©‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú‡ßá‡¶∞ ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
#           body: |
#             üöÄ **New Release Published**

#             ### Docker Images
#             The following tags were pushed:
#             - **All Tags:** `${{ env.ALL_TAGS }}`
#             - **Primary Tag:** `${{ env.IMAGE_NAME }}:v${{ env.RELEASE_VERSION }}`
#             - **Latest Tag:** `${{ env.IMAGE_NAME }}:latest` (Assuming this is included in ALL_TAGS)

#             ---

#             - **Version:** `v${{ env.RELEASE_VERSION }}`
#             - **Deployed:** ${{ github.event.workflow_run.updated_at }}

#             View workflow run: ${{ github.event.workflow_run.html_url }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Create Release

on:
  workflow_run:
    # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Build and Deploy YML ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡ßá‡¶≤‡ßá
    workflows: ["Build, Test & Deploy"]
    types:
      - completed

permissions:
  contents: write # ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ‡¶ß‡¶æ‡¶™ ‡ßß: Artifact ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ü‡¶ó‡ßá‡¶∞ YML-‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá)
      # ... (unzip fix ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®) ...
      - name: Download Artifact Zip Data
        uses: actions/github-script@v6
        id: download
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }},
            });

            // ‚ö°Ô∏è FIX: Artifact-‡¶è‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
            const matchArtifact = artifacts.artifacts.find(artifact => artifact.name === 'release-data-artifact'); 

            if (!matchArtifact) {
              core.setFailed('Could not find artifact release-data-artifact'); // erorr message change
              return;
            }

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });

            const fs = require('fs');
            fs.writeFileSync('release-data.zip', Buffer.from(download.data));

      # ‡¶ß‡¶æ‡¶™ ‡ß®: ZIP ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶®‡¶ú‡¶ø‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶®‡ßÅ‡¶®
      - name: Unzip and Load Tag Data
        id: load_data
        run: |
          # unzip ‡¶è‡¶¨‡¶Ç ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
          unzip release-data.zip -d release-data

          echo "### Loaded release_data.txt contents ###" # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
          cat release-data/release_data.txt # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
          echo "########################################"

          # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá GITHUB_ENV ‡¶§‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ

          # VERSION_TAG ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
          VERSION_TAG=$(grep "^VERSION_TAG=" release-data/release_data.txt | cut -d'=' -f2)
          echo "RELEASE_VERSION=$VERSION_TAG" >> $GITHUB_ENV

          # FULL_IMAGE_NAME ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
          FULL_IMAGE_NAME=$(grep "^FULL_IMAGE_NAME=" release-data/release_data.txt | cut -d'=' -f2)
          echo "IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

          # DOCKER_TAGS ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
          DOCKER_TAGS=$(grep "^DOCKER_TAGS=" release-data/release_data.txt | cut -d'=' -f2)
          echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_ENV

          echo "‚úÖ Environment variables set successfully."
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          # vX.Y.Z ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}

          body: |
            üöÄ **New Release Published**

            This release corresponds to the tag **${{ env.RELEASE_VERSION }}**

            ### Docker Images Pushed
            The application was built and pushed with the following tags:
            - **Version Tag:** `${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}`
            - **Latest Tag:** `${{ env.IMAGE_NAME }}:latest`
            - **All Tags:** `${{ env.DOCKER_TAGS }}`

            ---

            View build workflow run: ${{ github.event.workflow_run.html_url }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
