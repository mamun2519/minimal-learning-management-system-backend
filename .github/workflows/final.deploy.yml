name: Build, Test & Deploy

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  push:
    tags:
      - "v*" # v1.0.0, v1.0.1, ইত্যাদির জন্য

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/lms-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run tests
        run: npm test || echo "No tests specified"

      - name: Build TypeScript
        run: npm run build

  # Job 2: Build & Push Docker Image
  # docker-build-push:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   outputs:
  #     image-tag: ${{ steps.meta.outputs.tags }}
  #     version: ${{ steps.meta.outputs.version }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=sha,prefix={{branch}}-
  #           type=raw,value=latest,enable={{is_default_branch}}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
  #         cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
  #     # ⭐ নতুন যোগ করা: ইমেজ ট্যাগগুলি সেভ করুন
  #     - name: Save Image Tags for Release
  #       id: save_tags
  #       run: |
  #         echo "Tags: ${{ steps.meta.outputs.tags }}" > image_tags.txt
  #         echo "Version: ${{ steps.meta.outputs.version }}" >> image_tags.txt
  #         echo "Image Name: ${{ env.IMAGE_NAME }}" >> image_tags.txt

  #     # ⭐ নতুন যোগ করা: Artifact হিসাবে আপলোড করুন
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: release-image-tags
  #         path: image_tags.txt
  #         retention-days: 1
  # Job 3: Deploy to VPS
  docker-build-push:
    needs: build-and-test #(যদি থাকে, তাহলে রাখুন)
    runs-on: ubuntu-latest

    # ⚡️ পরিবর্তন ১: ট্যাগ পুশ হলেই কেবল এই জবটি চলবে
    if: startsWith(github.ref, 'refs/tags/v')

    # outputs:
    # আউটপুট প্রয়োজন নেই, কারণ ট্যাগ এখন স্থির (stable)
    # image-tag: ${{ steps.meta.outputs.tags }}
    # version: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # ⚡️ পরিবর্তন ২: শুধুমাত্র পুশ করা ট্যাগ (vX.Y.Z) এবং latest ট্যাগ ব্যবহার করুন
            type=raw,value=${{ github.ref_name }} # e.g., v1.0.0
            type=raw,value=latest # latest ট্যাগ

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # ⚡️ পরিবর্তন ৩: tags: ${{ steps.meta.outputs.tags }} ব্যবহার করুন
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      # ⭐ পরিবর্তন ৪: রিলিজের জন্য ডেটা সংরক্ষণ করুন (পেশাদারী ফর্মে)
      - name: Save Tag Data for Release
        id: save_tag
        run: |
          # vX.Y.Z ট্যাগ বের করুন
          VERSION_TAG=${{ github.ref_name }}
          # Docker Hub রেপোজিটরি নাম
          FULL_IMAGE_NAME=${{ env.IMAGE_NAME }}

          # ডেটা ফাইলে সেভ করা
          echo "VERSION_TAG=$VERSION_TAG" > release_data.txt
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> release_data.txt
          echo "DOCKER_TAGS=${{ steps.meta.outputs.tags }}" >> release_data.txt

      # ⭐ পরিবর্তন ৫: Artifact হিসাবে আপলোড করুন (ফাইল এবং নাম পরিবর্তন)
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-data-artifact
          path: release_data.txt
          retention-days: 1
  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    # নতুন যোগ করা: DEPLOY_PATH এবং CONTAINER_NAME সংজ্ঞায়িত করা
    env:
      CONTAINER_NAME: minimal-lms-backend
      DEPLOY_PATH: /home/${{ secrets.VPS_USERNAME }}/app/lms-backend # আপনার VPS এ deployment path

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}

          # BUG FIX: এই লাইনটি যোগ করা হয়েছে!
          # এটি নিশ্চিত করবে যে $IMAGE_NAME, $CONTAINER_NAME এবং $DEPLOY_PATH এর মান SSH স্ক্রিপ্টে পাওয়া যায়।
          envs: IMAGE_NAME,CONTAINER_NAME,DEPLOY_PATH

          script: |
            set -e
            echo "🎯 Deployment started with Image: $IMAGE_NAME" # ডিবাগিং এর জন্য IMAGE_NAME প্রিন্ট করুন

            mkdir -p $DEPLOY_PATH/logs $DEPLOY_PATH/uploads
            cd $DEPLOY_PATH

            # Create .env if not exists
            if [ ! -f .env ]; then
              echo "📌 Creating .env file..."
            cat > .env << 'EOF'
            NODE_ENV=production
            PORT=5000
            DB_USER_NAME=${{ secrets.DB_USER_NAME }}
            DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}
            DB_URL=${{ secrets.DB_URL }}
            CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            BCRYPT_SALT_ROUNDS=${{ secrets.BCRYPT_SALT_ROUNDS }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            EOF
              chmod 600 .env
            fi

            echo "📦 Pulling latest image..."
            # $IMAGE_NAME এর মান এখন সঠিকভাবে আসবে
            docker pull $IMAGE_NAME:main

            echo "🛑 Stopping old container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "🚀 Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              --env-file .env \
              -p 4001:5000 \
              -v $(pwd)/uploads:/app/uploads \
              -v $(pwd)/logs:/app/logs \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              --health-cmd="curl -f http://localhost:5000/health || exit 1" \
              --health-interval=15s \
              --health-retries=3 \
              --health-timeout=5s \
              $IMAGE_NAME:main

            echo "✅ Checking container health..."
            sleep 10
            docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME

            echo "📜 Showing latest logs..."
            docker logs $CONTAINER_NAME --tail 40

            echo "🧹 Pruning old images..."
            docker image prune -af --filter "until=48h"

            echo "✅ Deployment Successful ✅"
