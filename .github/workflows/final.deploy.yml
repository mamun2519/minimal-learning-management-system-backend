name: Build, Test & Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/lms-backend

jobs:
  # Job 1: Build & Test
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run tests
        run: npm test || echo "No tests specified"

      - name: Build TypeScript
        run: npm run build

  # Job 2: Build & Push Docker Image
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  # Job 3: Deploy to VPS
  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      # url: <https://api.yourdomain.com>
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            set -e

            # Colors for output
            GREEN='\\033[0;32m'
            YELLOW='\\033[1;33m'
            NC='\\033[0m'

            echo -e "${GREEN}Starting deployment...${NC}"

            # Navigate to app directory
            cd /var/www/lms-backend

            # Create env file if not exists
            if [ ! -f .env ]; then
              echo -e "${YELLOW}Creating .env file...${NC}"
             cat > .env << 'EOF'
             NODE_ENV=production 
             PORT=5000 
             DB_USER_NAME=${{ secrets.DB_USER_NAME }} 
             DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}
             DB_URL=${{ secrets.DB_URL }}
             CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }} 
             CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} 
             CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} 
             BCRYPT_SALT_ROUNDS=${{ secrets.BCRYPT_SALT_ROUNDS }} 
             JWT_SECRET=${{ secrets.JWT_SECRET }}
             JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }} 
             JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }} 
            EOF
            chmod 600 .env
            fi

            # Pull latest image
            echo -e "${GREEN}Pulling latest Docker image...${NC}"
            docker pull ${{ env.IMAGE_NAME }}:latest

            # Backup current container (if exists)
            if docker ps -a --format '{{.Names}}' | grep -q '^lms-backend$'; then
              echo -e "${YELLOW}Backing up current container...${NC}"
              docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S) || true
            fi

            # Stop and remove old container
            echo -e "${YELLOW}Stopping old container...${NC}"
            docker stop lms-backend 2>/dev/null || true
            docker rm lms-backend 2>/dev/null || true

            # Run new container
            echo -e "${GREEN}Starting new container...${NC}"
            docker run -d \
              --name lms-backend \
              --restart unless-stopped \
              --env-file .env \
              -p 4000:5000 \
              -v $(pwd)/uploads:/app/uploads \
              -v $(pwd)/logs:/app/logs \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              --health-cmd="node -e \"require('http').get('<http://localhost:5000/health>', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\"" \
              --health-interval=30s \
              --health-timeout=5s \
              --health-retries=3 \
              ${{ env.IMAGE_NAME }}:latest

            # Wait for container to be healthy
            echo -e "${YELLOW}Waiting for container to be healthy...${NC}"
            timeout=60
            elapsed=0
            while [ $elapsed -lt $timeout ]; do
              health=$(docker inspect --format='{{.State.Health.Status}}' lms-backend 2>/dev/null || echo "starting")
              if [ "$health" = "healthy" ]; then
                echo -e "${GREEN}Container is healthy!${NC}"
                break
              fi
              sleep 2
              elapsed=$((elapsed + 2))
            done

            # Show container status
            echo -e "${GREEN}=== Deployment Summary ===${NC}"
            docker ps --filter name=lms-backend --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"

            echo -e "${GREEN}=== Recent Logs ===${NC}"
            docker logs lms-backend --tail 20

            # Clean up old images (keep last 3)
            echo -e "${YELLOW}Cleaning up old images...${NC}"
            docker image prune -af --filter "until=72h"

            echo -e "${GREEN}Deployment completed successfully!${NC}"

      # - name: Health Check
      #   run: |
      #     sleep 10
      #     curl -f <https://api.yourdomain.com/health> || exit 1
