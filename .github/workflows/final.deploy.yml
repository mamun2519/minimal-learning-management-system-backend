name: Build, Test & Deploy

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  # push:
  #   tags:
  #     - "v*" # v1.0.0, v1.0.1, ইত্যাদির জন্য

  # push:
  #   branches: [main]
  workflow_dispatch: # Manual trigger option
    inputs:
      version:
        description: "Version to deploy (e.g., v1.2.3)"
        required: true
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/lms-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run tests
        run: npm test || echo "No tests specified"

      - name: Build TypeScript
        run: npm run build

  # Job 2: Docker Build and Push
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    #step 1: only run this job when a tag starting with 'v' is pushed
    # if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # step 2: Build and Push Docker Image with proper tags
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            #step 3: select tags: latest এবং vX.Y.Z
            type=raw,value=${{ github.ref_name }} # e.g., v1.0.0
            type=raw,value=latest # latest ট্যাগ
      # step 3: Build and Push Docker Image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # step 4: Use the generated metadata for tagging
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

        #step 5: Save Tag Data for Release
      - name: Save Tag Data for Release
        id: save_tag
        run: |
          # tag collected from the git ref
          VERSION_TAG=${{ github.ref_name }}
          # Docker Hub image name
          FULL_IMAGE_NAME=${{ env.IMAGE_NAME }}

          # data save the file
           echo "VERSION_TAG=$VERSION_TAG" > release_data.txt
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> release_data.txt
          echo "DOCKER_TAGS=${{ steps.meta.outputs.tags }}" >> release_data.txt

      # step 6: Upload Artifact for Release Job
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-data-artifact
          path: release_data.txt
          retention-days: 1
  # Job 3: Deploy to VPS
  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    # step 1: only run this job when a tag starting with 'v' is pushed
    # if: github.ref == 'refs/heads/main'
    # if: startsWith(github.ref, 'refs/tags/v')

    # file path and environment variable for deployment
    env:
      CONTAINER_NAME: minimal-lms-backend
      DEPLOY_PATH: /home/${{ secrets.VPS_USERNAME }}/app/lms-backend # your VPS এ deployment path

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}

          envs: IMAGE_NAME,CONTAINER_NAME,DEPLOY_PATH

          script: |
            set -e
            echo "🎯 Deployment started with Image: $IMAGE_NAME" 

            mkdir -p $DEPLOY_PATH/logs $DEPLOY_PATH/uploads
            cd $DEPLOY_PATH

            # Create .env if not exists
            if [ ! -f .env ]; then
              echo "📌 Creating .env file..."
            cat > .env << 'EOF'
            NODE_ENV=production
            PORT=5000
            DB_USER_NAME=${{ secrets.DB_USER_NAME }}
            DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}
            DB_URL=${{ secrets.DB_URL }}
            CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            BCRYPT_SALT_ROUNDS=${{ secrets.BCRYPT_SALT_ROUNDS }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            EOF
              chmod 600 .env
            fi

            echo "📦 Pulling latest image..."
            docker pull $IMAGE_NAME:main

            echo "🛑 Stopping old container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "🚀 Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              --env-file .env \
              -p 4001:5000 \
              -v $(pwd)/uploads:/app/uploads \
              -v $(pwd)/logs:/app/logs \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              --health-cmd="curl -f http://localhost:4001/health || exit 1" \
              --health-interval=15s \
              --health-retries=3 \
              --health-timeout=5s \
              $IMAGE_NAME:main

            echo "✅ Checking container health..."
            sleep 10
            docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME

            echo "📜 Showing latest logs..."
            docker logs $CONTAINER_NAME --tail 40

            echo "🧹 Pruning old images..."
            docker image prune -af --filter "until=48h"

            echo "✅ Deployment Successful ✅"
