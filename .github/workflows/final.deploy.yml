name: Build, Test & Deploy

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  push:
    tags:
      - "v*" # v1.0.0, v1.0.1, only for version tags

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/lms-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run tests
        run: npm test || echo "No tests specified"

      - name: Build TypeScript
        run: npm run build

  # Job 3: Deploy to VPS
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest

    # ‚ö°Ô∏è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡ßß: ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶™‡ßÅ‡¶∂ ‡¶π‡¶≤‡ßá‡¶á ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶è‡¶á ‡¶ú‡¶¨‡¶ü‡¶ø ‡¶ö‡¶≤‡¶¨‡ßá
    if: startsWith(github.ref, 'refs/tags/v')

    # outputs:
    # ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶è‡¶ñ‡¶® ‡¶∏‡ßç‡¶•‡¶ø‡¶∞ (stable)
    # image-tag: ${{ steps.meta.outputs.tags }}
    # version: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # ‚ö°Ô∏è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡ß®: ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡ßÅ‡¶∂ ‡¶ï‡¶∞‡¶æ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó (vX.Y.Z) ‡¶è‡¶¨‡¶Ç latest ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
            type=raw,value=${{ github.ref_name }} # e.g., v1.0.0
            # type=raw,value=latest # latest ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # ‚ö°Ô∏è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡ß©: tags: ${{ steps.meta.outputs.tags }} ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      # ‚≠ê ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡ß™: ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞‡ßÄ ‡¶´‡¶∞‡ßç‡¶Æ‡ßá)
      # - name: Save Tag Data for Release
      #   id: save_tag
      #   run: |
      #     # vX.Y.Z ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
      #     VERSION_TAG=${{ github.ref_name }}
      #     # Docker Hub ‡¶∞‡ßá‡¶™‡ßã‡¶ú‡¶ø‡¶ü‡¶∞‡¶ø ‡¶®‡¶æ‡¶Æ
      #     FULL_IMAGE_NAME=${{ env.IMAGE_NAME }}

      #     # ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
      #     echo "VERSION_TAG=$VERSION_TAG" > release_data.txt
      #     echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> release_data.txt
      #     echo "DOCKER_TAGS=${{ steps.meta.outputs.tags }}" >> release_data.txt

      # # ‚≠ê ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡ß´: Artifact ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®)
      # - name: Upload Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: release-data-artifact
      #     path: release_data.txt
      #     retention-days: 1
  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    if: startsWith(github.ref, 'refs/tags/v')

    # new add: DEPLOY_PATH ‡¶è‡¶¨‡¶Ç CONTAINER_NAME
    env:
      CONTAINER_NAME: minimal-lms-backend
      DEPLOY_PATH: /home/${{ secrets.VPS_USERNAME }}/app/lms-backend # your VPS  deployment path

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}

          # BUG FIX: ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!
          # ‡¶è‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡ßá $IMAGE_NAME, $CONTAINER_NAME ‡¶è‡¶¨‡¶Ç $DEPLOY_PATH ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® SSH ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡•§
          envs: IMAGE_NAME,CONTAINER_NAME,DEPLOY_PATH

          script: |
            set -e
            VERSION_TAG=${{ github.ref_name }}
            echo "üéØ Deployment started with Image: $IMAGE_NAME" # ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø IMAGE_NAME ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

            mkdir -p $DEPLOY_PATH/logs $DEPLOY_PATH/uploads
            cd $DEPLOY_PATH

            # Create .env if not exists
            if [ ! -f .env ]; then
              echo "üìå Creating .env file..."
            cat > .env << 'EOF'
            NODE_ENV=production
            PORT=5000
            DB_USER_NAME=${{ secrets.DB_USER_NAME }}
            DB_USER_PASSWORD=${{ secrets.DB_USER_PASSWORD }}
            DB_URL=${{ secrets.DB_URL }}
            CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            BCRYPT_SALT_ROUNDS=${{ secrets.BCRYPT_SALT_ROUNDS }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            EOF
              chmod 600 .env
            fi

            echo "üì¶ Pulling image: $IMAGE_NAME:$VERSION_TAG"
            docker pull $IMAGE_NAME:$VERSION_TAG

            echo "üõë Stopping old container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "üöÄ Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              --env-file .env \
              -p 4001:5000 \
              -v $(pwd)/uploads:/app/uploads \
              -v $(pwd)/logs:/app/logs \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              --health-cmd="curl -f http://localhost:5000/health || exit 1" \
              --health-interval=15s \
              --health-retries=3 \
              --health-timeout=5s \
              # ‚ö°Ô∏è ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: IMAGE_NAME ‡¶è‡¶¨‡¶Ç VERSION_TAG ‡¶°‡¶æ‡¶¨‡¶≤ ‡¶ï‡ßã‡¶ü‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
              "${IMAGE_NAME}:${VERSION_TAG}"

            echo "‚úÖ Checking container health..."
            sleep 10
            docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME

            echo "üìú Showing latest logs..."
            docker logs $CONTAINER_NAME --tail 40

            echo "üßπ Pruning old images..."
            docker image prune -af --filter "until=48h"

            echo "‚úÖ Deployment Successful ‚úÖ"
  finalize-release:
    needs: deploy # ‚úÖ ‡¶è‡¶á ‡¶ú‡¶¨‡¶ü‡¶ø ‡¶ï‡ßá‡¶¨‡¶≤ deploy ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá‡¶á ‡¶∞‡¶æ‡¶® ‡¶π‡¶¨‡ßá
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ‚ö°Ô∏è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡ß©: vX.Y.Z ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó‡¶ü‡¶ø‡¶ï‡ßá latest ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡ßÅ‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®
      - name: Tag and Push Latest
        run: |
          VERSION_TAG=${{ github.ref_name }}
          FULL_IMAGE_NAME=${{ env.IMAGE_NAME }}

          # vX.Y.Z ‡¶á‡¶Æ‡ßá‡¶ú‡¶ü‡¶ø‡¶ï‡ßá latest ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
          docker pull $FULL_IMAGE_NAME:$VERSION_TAG
          docker tag $FULL_IMAGE_NAME:$VERSION_TAG $FULL_IMAGE_NAME:latest
          docker push $FULL_IMAGE_NAME:latest

          echo "‚úÖ Latest tag updated successfully."

      # ‚ö°Ô∏è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡ß™: Artifact ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ, ‡¶Ø‡¶æ‡¶§‡ßá Create Release-‡¶è ‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
      - name: Save Final Tag Data for Release
        id: save_tag
        run: |
          VERSION_TAG=${{ github.ref_name }}
          FULL_IMAGE_NAME=${{ env.IMAGE_NAME }}

          echo "VERSION_TAG=$VERSION_TAG" > release_data.txt
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> release_data.txt
          echo "DOCKER_TAGS=$VERSION_TAG,latest" >> release_data.txt # ‡¶è‡¶ñ‡¶® latest ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-data-artifact
          path: release_data.txt
          retention-days: 1
